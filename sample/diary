
%% Detect which is running: octave or matlab?
if (exist('OCTAVE_VERSION','builtin'))
  matlabflag=false;
  disp('----------------run on OCTAVE----------------');
else
  matlabflag=true;
  disp('----------------run on MATLAB----------------');
end
----------------run on MATLAB----------------

%% Read in constants in cgs unit and conversion factors.
Consts_Conversions;  %%==== script ==================
%% Read in parameters
run('params.m');  %%==== script ==================

plotflag =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0


THflag =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0


OWRTflag =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   1


%% Check function availability and provide cure
Check_functions;  %%==== script ==================
if returnflag
  clear;
  return;
end

%% Read in cosmology
run(Cosmology);  %%==== script ==================

fb = ombh2/(ombh2+omch2); %% baryon/matter fraction
fc = omch2/(ombh2+omch2); %% CDM/matter fraction

%% Read in parameters for initial condition
run('params_patch.m');  %%==== script ==================
%% Requires mod(Ncell_p,4)=0 to properly use existing random seed.
if (mod(Ncell_p,4)~=0)
  disp('Choose a number which is multiple of 4 for Ncell_p');
  clear;
  return;
end
%% Setting resolution etc.
%% index for center of k-space (e.g. if 6 sample points exist, 4th is the
%% center, not 3rd). This convention for even number is different from that
%% in p.69 of "DFT: An Owner Manual ..." by W. Briggs.
%% k index runs from -N/2 to N/2-1 in this code, but Briggs uses
%% -N/2+1 to N/2. Had to choose the former convention due to FFT convention
%% of Matlab and Octave for even numbered cases.

%% Read in parameters for initial condition
patch_init;  %%==== script ==================

interp2opt = 'cubic'

interp2opt =

    'cubic'

%% May choose 'pchip' for Matlab below, but for consistency with Octave
%% just use 'linear'. Octave interpn does not have 'pchip' implemented yet.
%% 'spline' is somewhat dangerous.
interpnopt = 'linear' 

interpnopt =

    'linear'


%% For assigning k, see p.69 of "DFT..." by W. Briggs.
%% The convention below has [-Nhalf_p:Nhalf_p-1], different
%% from Briggs convention [-Nhalf_p+1:Nhalf_p], but this is
%% to par with Matlab and Octave FFT convention.

%% k1 component on each (k1,k2,k3) point, etc.
[k1_3D_p, k2_3D_p, k3_3D_p] = ndgrid(-Nhalf_p:Nhalf_p-1);
k1_3D_p = kunit_p * k1_3D_p;
k2_3D_p = kunit_p * k2_3D_p;
k3_3D_p = kunit_p * k3_3D_p;
ksq_p   = k1_3D_p.^2 +k2_3D_p.^2 +k3_3D_p.^2; %% |k|^2

%% utilize above for rvector too, but just in memory saving way (****)
%%r1 = k1_3D_p/kunit_p;
%%r2 = k2_3D_p/kunit_p;
%%r3 = k3_3D_p/kunit_p;

%% read in mu info
mu  = load([setupdir '/mu.dat']);
dmu = mu(2)-mu(1);
Nmu = length(mu);

%% choose patch to generate initial condition on
Choose_finalpatch;  %%==== script ==================
Patches ordered in calculation time, from oldest(top) to newest(bottom)
-----------------------------------------------------------------------
Patch #  ix  iy  iz  Deltac/sigma(Deltac)  V_cb(km/s)  at z=1000
  1     118 102 120      1.000e+00          3.000e+01
  2      75  42 120      1.998e+00          5.003e+01
  3      40  84  79      2.966e-04          2.299e+01
  4     127  34  65     -5.001e-01          2.000e+01
  5     135  36  39      1.999e+00          2.455e+01
  6      34   7  94      1.997e-02          4.702e-01
  7     113  52  44      3.682e-03          2.079e+00
  8     113  52  44      3.682e-03          2.079e+00
Choose a patch of your interest; default is 8 if you just hit Enter below.
Enter your choice (patch #):3
Patch # 3 chosen.
if returnflag
  clear;
  return;
end

%% open transfer function file for given patch
ic   = cellspec(idxcc,1);
jc   = cellspec(idxcc,2);
kc   = cellspec(idxcc,3);
strD = [setupdir '/deltas/Deltas_1Dmu_ic' num2str(ic) '_jc' num2str(jc) '_kc' num2str(kc) '-muhalf.matbin'];
if matlabflag
  load(strD, '-mat', 'ksampletab', 'deltasc', 'deltasb', 'deltasThc', 'deltasThb', 'deltasT');
else
  load('-mat-binary', strD, 'ksampletab', 'deltasc', 'deltasb', 'deltasThc', 'deltasThb', 'deltasT');
end

%% Generate initial condition directory
if ~exist(ICdir)
  mkdir(ICdir);
end

Lbox_p_inMpch = Lbox_p*h;  %% enzo uses 'ComovingBoxSize' in units of Mpc/h

ICsubdir = [ICdir '/' num2str(Lbox_p_inMpch,'%.2f') 'Mpch_' num2str(Ncell_p) '_ic' num2str(ic) '_jc' num2str(jc) '_kc' num2str(kc)];
if ~exist(ICsubdir)
  mkdir(ICsubdir); 
end

zf = zzend;  %% redshift for initial condition
af = 1/(1+zf);  %% scale factor for initial condition

%% prepare for initial conditions for enzo (set units)
Prepare_enzoIC;  %%==== script ==================

%% Set gaussian random seed
Set_gaussrand;  %%==== script ==================

%% record random seed if wanted
if recordseedflag
  fileNseed = [ICsubdir '/subgaussseed' num2str(Nmode_p) '.matbin'];
  if matlabflag
    save(fileNseed, 'randamp', 'randphs', '-v6');
  else
    save('-mat-binary', fileNseed, 'randamp', 'randphs');
  end
end


%% For a given k, -mu case has its Real same as Imag of mu case,
%%                         and its Imag same as Real of mu case.
%% Switching Real and Imag is done easily by i*conj(complex_number).
%% -- First, shift mu=[0,...,1] values to right (matrices increase in size).
deltasc  (:,Nmu:2*Nmu-1) = deltasc  (:,:);
deltasb  (:,Nmu:2*Nmu-1) = deltasb  (:,:);
deltasThc(:,Nmu:2*Nmu-1) = deltasThc(:,:);
deltasThb(:,Nmu:2*Nmu-1) = deltasThb(:,:);
deltasT  (:,Nmu:2*Nmu-1) = deltasT  (:,:);
%% -- Then, generate mu=[-1,...,0) values
deltasc  (:,Nmu-1:-1:1) = conj(deltasc  (:,Nmu+1:2*Nmu-1))*i;
deltasb  (:,Nmu-1:-1:1) = conj(deltasb  (:,Nmu+1:2*Nmu-1))*i;
deltasThc(:,Nmu-1:-1:1) = conj(deltasThc(:,Nmu+1:2*Nmu-1))*i;
deltasThb(:,Nmu-1:-1:1) = conj(deltasThb(:,Nmu+1:2*Nmu-1))*i;
deltasT  (:,Nmu-1:-1:1) = conj(deltasT  (:,Nmu+1:2*Nmu-1))*i;
  
%% Extend mu to cover full angle accordingly: muext=[-1,...,0,...,1]
muext              = zeros(1,2*Nmu-1);
muext(Nmu:2*Nmu-1) =  mu(1:Nmu);
muext(Nmu-1:-1:1)  = -mu(2:Nmu);

%% mu = cosine(angle between k vector and V_cb=V_c-V_b).
%% The mu convention is consistent with f.m.
costh_k_V = (V_cb_1_azend(ic,jc,kc)*k1_3D_p + V_cb_2_azend(ic,jc,kc)*k2_3D_p + V_cb_3_azend(ic,jc,kc)*k3_3D_p) /norm([V_cb_1_azend(ic,jc,kc) V_cb_2_azend(ic,jc,kc) V_cb_3_azend(ic,jc,kc)]) ./sqrt(ksq_p);
%% This script generates initial condition data for enzo and dumps them.
%% For ICs for other simulation codes, this is the script to start from.
%%
%% Initial condition generation using following steps, for enzo.
%% (1) Get k and mu dependent fluctuation using transfer function.
%% (2) Apply random seed and normalize (rand_real_norm).
%% (3) FFT & record.


%% =========== CDM density and position ======================== begin

%% Matlab & Octave 2D interpolation!! --> generating k-space deltas 
%% with array size Nmode_p, Nmode_p, Nmode_p.
%% Matlab allows extrapolation only for 'spline' method.
%% (costh_k_V and ksq_p have same array dimension, so interp2 
%%  interprets these as scattered data points: see interp2 instruction)
%% This is linear logarithmic interpolation along k, so the monopole
%% term (k=0) may obtain inf or nan due to 0.5*log(ksq_p). 
%% We will cure this by nullifying monopole anyway down below (**).
disp('----- Interpolating transfer function -----');
----- Interpolating transfer function -----
dc  = interp2(muext,log(ksampletab), deltasc,  costh_k_V,0.5*log(ksq_p),interp2opt);  %% dc still k-space values here.

%% randomize, apply reality, and normalize
disp('----- Convolving transfer function with random number -----');
----- Convolving transfer function with random number -----
dc = rand_real_norm(dc,Nmode_p,Nc_p,randamp,randphs,Vbox_p);
%% CDM displacement vector, related to CDM density at 1st order.
%% No need for above normalization because this is
%% derived after above normalization on dc.
%% ------------- cpos1 ----------------------
disp('----- Calculating CDM position x -----');
----- Calculating CDM position x -----
Psi1                 = i*k1_3D_p./ksq_p.*dc;
Psi1(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi1                 = real(ifftn(ifftshift(Psi1)));

xCDM_plane    =   Psi1(:,:,1) + k1_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
xCDM_ex_plane = 5*Psi1(:,:,1) + k1_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL but to make more contrast in CDM position

%% Normalized position of particles in domain [0,1), cell-centered way. (enzo)
%% If unperturbed(Psi=0), it should run [0.5, 1.5, ...., Nmode_p-0.5]/Nmode_p,
%% For enzo, wrapping needed if perturbed potition is out of the domain [0, 1).
Psi1 = mod((Psi1 + (k1_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);


%% ------------- cpos2 ----------------------
disp('----- Calculating CDM position y -----');
----- Calculating CDM position y -----
Psi2                 = i*k2_3D_p./ksq_p.*dc;
Psi2(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi2                 = real(ifftn(ifftshift(Psi2)));

yCDM_plane    =   Psi2(:,:,1) + k2_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
yCDM_ex_plane = 5*Psi2(:,:,1) + k2_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL but to make more contrast in CDM position

Psi2 = mod((Psi2 + (k2_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);

%% ------------- cpos3 ----------------------
disp('----- Calculating CDM position z -----');
----- Calculating CDM position z -----
Psi3                 = i*k3_3D_p./ksq_p.*dc;
Psi3(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi3                 = real(ifftn(ifftshift(Psi3)));

zCDM_plane    =   Psi3(:,:,1) + k3_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
zCDM_ex_plane = 5*Psi3(:,:,1) + k3_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL buif particlevelocity_accuracyflag

Psi3 = mod((Psi3 + (k3_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);

%% Write Particle Positions
foutname='ParticlePositions';
datasetname=['/' foutname];
if exist(foutname)
  fileattrib(foutname,'+w');
end
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
h5create(foutname,datasetname,size([Psi1(:); Psi2(:); Psi3(:)]));
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5create>create_dataset', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5create.m', 163)" style="font-weight:bold">h5create>create_dataset</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5create.m',163,0)">line 163</a>)
The dataset '/ParticlePositions' already exists.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5create', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5create.m', 73)" style="font-weight:bold">h5create</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5create.m',73,0)">line 73</a>)
create_dataset(options);
} 
delete('ParticlePositions')
%% This script generates initial condition data for enzo and dumps them.
%% For ICs for other simulation codes, this is the script to start from.
%%
%% Initial condition generation using following steps, for enzo.
%% (1) Get k and mu dependent fluctuation using transfer function.
%% (2) Apply random seed and normalize (rand_real_norm).
%% (3) FFT & record.


%% =========== CDM density and position ======================== begin

%% Matlab & Octave 2D interpolation!! --> generating k-space deltas 
%% with array size Nmode_p, Nmode_p, Nmode_p.
%% Matlab allows extrapolation only for 'spline' method.
%% (costh_k_V and ksq_p have same array dimension, so interp2 
%%  interprets these as scattered data points: see interp2 instruction)
%% This is linear logarithmic interpolation along k, so the monopole
%% term (k=0) may obtain inf or nan due to 0.5*log(ksq_p). 
%% We will cure this by nullifying monopole anyway down below (**).
disp('----- Interpolating transfer function -----');
----- Interpolating transfer function -----
dc  = interp2(muext,log(ksampletab), deltasc,  costh_k_V,0.5*log(ksq_p),interp2opt);  %% dc still k-space values here.

%% randomize, apply reality, and normalize
disp('----- Convolving transfer function with random number -----');
----- Convolving transfer function with random number -----
dc = rand_real_norm(dc,Nmode_p,Nc_p,randamp,randphs,Vbox_p);
%% CDM displacement vector, related to CDM density at 1st order.
%% No need for above normalization because this is
%% derived after above normalization on dc.
%% ------------- cpos1 ----------------------
disp('----- Calculating CDM position x -----');
----- Calculating CDM position x -----
Psi1                 = i*k1_3D_p./ksq_p.*dc;
Psi1(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi1                 = real(ifftn(ifftshift(Psi1)));

xCDM_plane    =   Psi1(:,:,1) + k1_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
xCDM_ex_plane = 5*Psi1(:,:,1) + k1_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL but to make more contrast in CDM position

%% Normalized position of particles in domain [0,1), cell-centered way. (enzo)
%% If unperturbed(Psi=0), it should run [0.5, 1.5, ...., Nmode_p-0.5]/Nmode_p,
%% For enzo, wrapping needed if perturbed potition is out of the domain [0, 1).
Psi1 = mod((Psi1 + (k1_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);


%% ------------- cpos2 ----------------------
disp('----- Calculating CDM position y -----');
----- Calculating CDM position y -----
Psi2                 = i*k2_3D_p./ksq_p.*dc;
Psi2(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi2                 = real(ifftn(ifftshift(Psi2)));

yCDM_plane    =   Psi2(:,:,1) + k2_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
yCDM_ex_plane = 5*Psi2(:,:,1) + k2_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL but to make more contrast in CDM position

Psi2 = mod((Psi2 + (k2_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);

%% ------------- cpos3 ----------------------
disp('----- Calculating CDM position z -----');
----- Calculating CDM position z -----
Psi3                 = i*k3_3D_p./ksq_p.*dc;
Psi3(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi3                 = real(ifftn(ifftshift(Psi3)));

zCDM_plane    =   Psi3(:,:,1) + k3_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
zCDM_ex_plane = 5*Psi3(:,:,1) + k3_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL buif particlevelocity_accuracyflag

Psi3 = mod((Psi3 + (k3_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);

%% Write Particle Positions
foutname='ParticlePositions';
datasetname=['/' foutname];
if exist(foutname)
  fileattrib(foutname,'+w');
end
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
h5create(foutname,datasetname,size([Psi1(:); Psi2(:); Psi3(:)]));
h5write(foutname,datasetname,[Psi1(:); Psi2(:); Psi3(:)]);
h5writeatt(foutname,datasetname,'Component_Rank',int8(3));
h5writeatt(foutname,datasetname,'Component_Size',int8(size(Psi1)));
h5writeatt(foutname,datasetname,'Rank',int8(1));
h5writeatt(foutname,datasetname,'Dimensions',int8(size(Psi1)));
h5writeatt(foutname,datasetname,'TopGridDims',int8(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int8(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int8(zeros(1,3)));
clear Psi1;
clear Psi2;
clear Psi3;
clear
fname='../ICs/1.00Mpch_64_ic40_jc84_kc79/ParticlePositions';
datname='/ParticlePositions');
 datname='/ParticlePositions');
                             
{Error: Unbalanced or unexpected parenthesis or bracket.
} 
datname='/ParticlePositions';
dat=h5read(fname,datname);
ffname='ParticlePositions';
datt=h5read(ffname,datname);
size(datt)

ans =

      786432           1

h5disp(ffname)
HDF5 ParticlePositions 
Group '/' 
    Dataset 'ParticlePositions' 
        Size:  786432x1
        MaxSize:  786432x1
        Datatype:   H5T_IEEE_F64LE (double)
        ChunkSize:  []
        Filters:  none
        FillValue:  0.000000
        Attributes:
            'Component_Rank':  3 
            'Component_Size':  64 64 64 
            'Rank':  1 
            'Dimensions':  64 64 64 
            'TopGridDims':  -128 -128 -128 
            'TopGridEnd':  -128 -128 -128 
            'TopGridStart':  0 0 0 
2^15

ans =

       32768

2^31

ans =

   2.1475e+09

more off; %% enables to see progress
returnflag = false; %% main program need to stop when script stops.

%% Start recording log
diary on;

%% Detect which is running: octave or matlab?
if (exist('OCTAVE_VERSION','builtin'))
  matlabflag=false;
  disp('----------------run on OCTAVE----------------');
else
  matlabflag=true;
  disp('----------------run on MATLAB----------------');
end
----------------run on MATLAB----------------

%% Read in constants in cgs unit and conversion factors.
Consts_Conversions;  %%==== script ==================
%% Read in parameters
run('params.m');  %%==== script ==================

plotflag =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0


THflag =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   0


OWRTflag =

  <a href="matlab:helpPopup logical" style="font-weight:bold">logical</a>

   1


%% Check function availability and provide cure
Check_functions;  %%==== script ==================
if returnflag
  clear;
  return;
end

%% Read in cosmology
run(Cosmology);  %%==== script ==================

fb = ombh2/(ombh2+omch2); %% baryon/matter fraction
fc = omch2/(ombh2+omch2); %% CDM/matter fraction

%% Read in parameters for initial condition
run('params_patch.m');  %%==== script ==================
%% Requires mod(Ncell_p,4)=0 to properly use existing random seed.
if (mod(Ncell_p,4)~=0)
  disp('Choose a number which is multiple of 4 for Ncell_p');
  clear;
  return;
end
%% Setting resolution etc.
%% index for center of k-space (e.g. if 6 sample points exist, 4th is the
%% center, not 3rd). This convention for even number is different from that
%% in p.69 of "DFT: An Owner Manual ..." by W. Briggs.
%% k index runs from -N/2 to N/2-1 in this code, but Briggs uses
%% -N/2+1 to N/2. Had to choose the former convention due to FFT convention
%% of Matlab and Octave for even numbered cases.

%% Read in parameters for initial condition
patch_init;  %%==== script ==================

interp2opt = 'cubic'

interp2opt =

    'cubic'

%% May choose 'pchip' for Matlab below, but for consistency with Octave
%% just use 'linear'. Octave interpn does not have 'pchip' implemented yet.
%% 'spline' is somewhat dangerous.
interpnopt = 'linear' 

interpnopt =

    'linear'


%% For assigning k, see p.69 of "DFT..." by W. Briggs.
%% The convention below has [-Nhalf_p:Nhalf_p-1], different
%% from Briggs convention [-Nhalf_p+1:Nhalf_p], but this is
%% to par with Matlab and Octave FFT convention.

%% k1 component on each (k1,k2,k3) point, etc.
[k1_3D_p, k2_3D_p, k3_3D_p] = ndgrid(-Nhalf_p:Nhalf_p-1);
k1_3D_p = kunit_p * k1_3D_p;
k2_3D_p = kunit_p * k2_3D_p;
k3_3D_p = kunit_p * k3_3D_p;
ksq_p   = k1_3D_p.^2 +k2_3D_p.^2 +k3_3D_p.^2; %% |k|^2

%% utilize above for rvector too, but just in memory saving way (****)
%%r1 = k1_3D_p/kunit_p;
%%r2 = k2_3D_p/kunit_p;
%%r3 = k3_3D_p/kunit_p;

%% read in mu info
mu  = load([setupdir '/mu.dat']);
dmu = mu(2)-mu(1);
Nmu = length(mu);

%% choose patch to generate initial condition on
Choose_finalpatch;  %%==== script ==================
Patches ordered in calculation time, from oldest(top) to newest(bottom)
-----------------------------------------------------------------------
Patch #  ix  iy  iz  Deltac/sigma(Deltac)  V_cb(km/s)  at z=1000
  1     118 102 120      1.000e+00          3.000e+01
  2      75  42 120      1.998e+00          5.003e+01
  3      40  84  79      2.966e-04          2.299e+01
  4     127  34  65     -5.001e-01          2.000e+01
  5     135  36  39      1.999e+00          2.455e+01
  6      34   7  94      1.997e-02          4.702e-01
  7     113  52  44      3.682e-03          2.079e+00
  8     113  52  44      3.682e-03          2.079e+00
Choose a patch of your interest; default is 8 if you just hit Enter below.
Enter your choice (patch #):3
Patch # 3 chosen.
if returnflag
  clear;
  return;
end

%% open transfer function file for given patch
ic   = cellspec(idxcc,1);
jc   = cellspec(idxcc,2);
kc   = cellspec(idxcc,3);
strD = [setupdir '/deltas/Deltas_1Dmu_ic' num2str(ic) '_jc' num2str(jc) '_kc' num2str(kc) '-muhalf.matbin'];
if matlabflag
  load(strD, '-mat', 'ksampletab', 'deltasc', 'deltasb', 'deltasThc', 'deltasThb', 'deltasT');
else
  load('-mat-binary', strD, 'ksampletab', 'deltasc', 'deltasb', 'deltasThc', 'deltasThb', 'deltasT');
end

%% Generate initial condition directory
if ~exist(ICdir)
  mkdir(ICdir);
end

Lbox_p_inMpch = Lbox_p*h;  %% enzo uses 'ComovingBoxSize' in units of Mpc/h

ICsubdir = [ICdir '/' num2str(Lbox_p_inMpch,'%.2f') 'Mpch_' num2str(Ncell_p) '_ic' num2str(ic) '_jc' num2str(jc) '_kc' num2str(kc)];
if ~exist(ICsubdir)
  mkdir(ICsubdir); 
end

zf = zzend;  %% redshift for initial condition
af = 1/(1+zf);  %% scale factor for initial condition

%% prepare for initial conditions for enzo (set units)
Prepare_enzoIC;  %%==== script ==================

%% Set gaussian random seed
Set_gaussrand;  %%==== script ==================

%% record random seed if wanted
if recordseedflag
  fileNseed = [ICsubdir '/subgaussseed' num2str(Nmode_p) '.matbin'];
  if matlabflag
    save(fileNseed, 'randamp', 'randphs', '-v6');
  else
    save('-mat-binary', fileNseed, 'randamp', 'randphs');
  end
end


%% For a given k, -mu case has its Real same as Imag of mu case,
%%                         and its Imag same as Real of mu case.
%% Switching Real and Imag is done easily by i*conj(complex_number).
%% -- First, shift mu=[0,...,1] values to right (matrices increase in size).
deltasc  (:,Nmu:2*Nmu-1) = deltasc  (:,:);
deltasb  (:,Nmu:2*Nmu-1) = deltasb  (:,:);
deltasThc(:,Nmu:2*Nmu-1) = deltasThc(:,:);
deltasThb(:,Nmu:2*Nmu-1) = deltasThb(:,:);
deltasT  (:,Nmu:2*Nmu-1) = deltasT  (:,:);
%% -- Then, generate mu=[-1,...,0) values
deltasc  (:,Nmu-1:-1:1) = conj(deltasc  (:,Nmu+1:2*Nmu-1))*i;
deltasb  (:,Nmu-1:-1:1) = conj(deltasb  (:,Nmu+1:2*Nmu-1))*i;
deltasThc(:,Nmu-1:-1:1) = conj(deltasThc(:,Nmu+1:2*Nmu-1))*i;
deltasThb(:,Nmu-1:-1:1) = conj(deltasThb(:,Nmu+1:2*Nmu-1))*i;
deltasT  (:,Nmu-1:-1:1) = conj(deltasT  (:,Nmu+1:2*Nmu-1))*i;
  
%% Extend mu to cover full angle accordingly: muext=[-1,...,0,...,1]
muext              = zeros(1,2*Nmu-1);
muext(Nmu:2*Nmu-1) =  mu(1:Nmu);
muext(Nmu-1:-1:1)  = -mu(2:Nmu);

%% mu = cosine(angle between k vector and V_cb=V_c-V_b).
%% The mu convention is consistent with f.m.
costh_k_V = (V_cb_1_azend(ic,jc,kc)*k1_3D_p + V_cb_2_azend(ic,jc,kc)*k2_3D_p + V_cb_3_azend(ic,jc,kc)*k3_3D_p) /norm([V_cb_1_azend(ic,jc,kc) V_cb_2_azend(ic,jc,kc) V_cb_3_azend(ic,jc,kc)]) ./sqrt(ksq_p);
disp('----- Interpolating transfer function -----');
----- Interpolating transfer function -----
dc  = interp2(muext,log(ksampletab), deltasc,  costh_k_V,0.5*log(ksq_p),interp2opt);  %% dc still k-space values here.

%% randomize, apply reality, and normalize
disp('----- Convolving transfer function with random number -----');
----- Convolving transfer function with random number -----
dc = rand_real_norm(dc,Nmode_p,Nc_p,randamp,randphs,Vbox_p);
%% CDM displacement vector, related to CDM density at 1st order.
%% No need for above normalization because this is
%% derived after above normalization on dc.
%% ------------- cpos1 ----------------------
disp('----- Calculating CDM position x -----');
----- Calculating CDM position x -----
Psi1                 = i*k1_3D_p./ksq_p.*dc;
Psi1(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi1                 = real(ifftn(ifftshift(Psi1)));

xCDM_plane    =   Psi1(:,:,1) + k1_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
xCDM_ex_plane = 5*Psi1(:,:,1) + k1_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL but to make more contrast in CDM position

%% Normalized position of particles in domain [0,1), cell-centered way. (enzo)
%% If unperturbed(Psi=0), it should run [0.5, 1.5, ...., Nmode_p-0.5]/Nmode_p,
%% For enzo, wrapping needed if perturbed potition is out of the domain [0, 1).
Psi1 = mod((Psi1 + (k1_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);


%% ------------- cpos2 ----------------------
disp('----- Calculating CDM position y -----');
----- Calculating CDM position y -----
Psi2                 = i*k2_3D_p./ksq_p.*dc;
Psi2(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi2                 = real(ifftn(ifftshift(Psi2)));

yCDM_plane    =   Psi2(:,:,1) + k2_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
yCDM_ex_plane = 5*Psi2(:,:,1) + k2_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL but to make more contrast in CDM position

Psi2 = mod((Psi2 + (k2_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);

%% ------------- cpos3 ----------------------
disp('----- Calculating CDM position z -----');
----- Calculating CDM position z -----
Psi3                 = i*k3_3D_p./ksq_p.*dc;
Psi3(Nc_p,Nc_p,Nc_p) = complex(0);  %% fixing nan or inf monopole
Psi3                 = real(ifftn(ifftshift(Psi3)));

zCDM_plane    =   Psi3(:,:,1) + k3_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure
zCDM_ex_plane = 5*Psi3(:,:,1) + k3_3D_p(:,:,1)/kunit_p*Lcell_p + Lbox_p/2; %% for figure, NOT REAL buif particlevelocity_accuracyflag

Psi3 = mod((Psi3 + (k3_3D_p/kunit_p+0.5)*Lcell_p + Lbox_p/2)/Lbox_p, 1);

%% Write Particle Positions
foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
size(Psi1)

ans =

    64    64    64

size(Psi1(:))

ans =

      262144           1

size([Psi1(:) Psi2(:) Psi3(:)])

ans =

      262144           3

topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(size(Psi1)));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(size(Psi1)));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
clear datt
ffname

ffname =

    'ParticlePositions'

datt=h5read(ffname,datname);
size(datt)

ans =

      262144           3

dat(260000,1)

ans =

    0.4933

datt(260000,1)

ans =

    0.4948

dat(1,1)

ans =

    0.0050

datt(1,1)

ans =

    0.0099

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(size(Psi1(:))));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(size(Psi1(:))));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
datt=h5read(ffname,datname);
dat(1,1)

ans =

    0.0050

datt(1,1)

ans =

    0.0099

h5disp(ffname)
HDF5 ParticlePositions 
Group '/' 
    Dataset 'ParticlePositions' 
        Size:  262144x3
        MaxSize:  262144x3
        Datatype:   H5T_IEEE_F64LE (double)
        ChunkSize:  []
        Filters:  none
        FillValue:  0.000000
        Attributes:
            'Component_Rank':  3 
            'Component_Size':  262144 1 
            'Rank':  1 
            'Dimensions':  262144 1 
            'TopGridDims':  -99999 -99999 -99999 
            'TopGridEnd':  -100000 -100000 -100000 
            'TopGridStart':  0 0 0 
h5disp(fname)
HDF5 ParticlePositions 
Group '/' 
    Dataset 'ParticlePositions' 
        Size:  262144x3
        MaxSize:  262144x3
        Datatype:   H5T_IEEE_F64LE (double)
        ChunkSize:  []
        Filters:  none
        FillValue:  0.000000
        Attributes:
            'Component_Rank':  3
            'Component_Size':  262144
            'Rank':  1
            'Dimensions':  262144 
            'TopGridDims':  -99999 -99999 -99999 
            'TopGridEnd':  -100000 -100000 -100000 
            'TopGridStart':  0 
foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
datt=h5read(ffname,datname);
h5disp(ffname)
HDF5 ParticlePositions 
Group '/' 
    Dataset 'ParticlePositions' 
        Size:  262144x3
        MaxSize:  262144x3
        Datatype:   H5T_IEEE_F64LE (double)
        ChunkSize:  []
        Filters:  none
        FillValue:  0.000000
        Attributes:
            'Component_Rank':  3 
            'Component_Size':  262144 
            'Rank':  1 
            'Dimensions':  262144 
            'TopGridDims':  -99999 -99999 -99999 
            'TopGridEnd':  -100000 -100000 -100000 
            'TopGridStart':  0 0 0 
datt(1,1)

ans =

    0.0099

dat(1,1)

ans =

    0.0050

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
leng_scalar = length(Psi1(:));
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
%%h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
h5write(foutname,datasetname,Psi1, [1 1], [leng_scalar 1]);
{Matrix dimensions must agree.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write>determine_indexing', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 188)" style="font-weight:bold">h5write>determine_indexing</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',188,0)">line 188</a>)
    if any(sz - count)

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 122)" style="font-weight:bold">h5write</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',122,0)">line 122</a>)
    [offset,count,stride] =
    determine_indexing(space_id,p.Results);
} 
Ncell

Ncell =

   151

Ncell_p

Ncell_p =

    64

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
ND1 = Ncell_p;
ND3 = Ncell_p^3;
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
h5write(foutname,datasetname,reshape(Psi1,[ND3,1]), [1 1], ND3);
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write>determine_indexing', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 151)" style="font-weight:bold">h5write>determine_indexing</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',151,0)">line 151</a>)
The lengths of the START, COUNT, and STRIDE must match the
rank of the dataset.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 122)" style="font-weight:bold">h5write</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',122,0)">line 122</a>)
    [offset,count,stride] =
    determine_indexing(space_id,p.Results);
} 
h5write(foutname,datasetname,reshape(Psi1,[ND3,1]), [1 1], [ND3 1]);
h5write(foutname,datasetname,reshape(Psi2,[ND3,1]), [1 2], [ND3 1]);
h5write(foutname,datasetname,reshape(Psi3,[ND3,1]), [1 3], [ND3 1]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
datt=h5read(ffname,datname);
datt=h5read(ffname,datname);
h5disp(ffname)
HDF5 ParticlePositions 
Group '/' 
    Dataset 'ParticlePositions' 
        Size:  262144x3
        MaxSize:  262144x3
        Datatype:   H5T_IEEE_F64LE (double)
        ChunkSize:  []
        Filters:  none
        FillValue:  0.000000
        Attributes:
            'Component_Rank':  3 
            'Component_Size':  262144 
            'Rank':  1 
            'Dimensions':  262144 
            'TopGridDims':  -99999 -99999 -99999 
            'TopGridEnd':  -100000 -100000 -100000 
            'TopGridStart':  0 0 0 
datt(1,1)

ans =

    0.0099

datt(1,2)

ans =

    0.0090

datt(2,1)

ans =

    0.0251

dat(2,1)

ans =

    0.0221

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
ND1 = Ncell_p;
ND3 = Ncell_p^3;
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
%%h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
h5write(foutname,datasetname,Psi1);
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 107)" style="font-weight:bold">h5write</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',107,0)">line 107</a>)
The amount of data to be written does not match the size of
the HDF5 dataset.
} 
h5write(foutname,datasetname,Psi1, [1 1], [ND3 1]);
{Matrix dimensions must agree.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write>determine_indexing', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 188)" style="font-weight:bold">h5write>determine_indexing</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',188,0)">line 188</a>)
    if any(sz - count)

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('h5write', 'C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m', 122)" style="font-weight:bold">h5write</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2017b\toolbox\matlab\imagesci\h5write.m',122,0)">line 122</a>)
    [offset,count,stride] =
    determine_indexing(space_id,p.Results);
} 
fout = fopen([ICsubdir '/cpos1'], 'w');
fwrite(fout,Psi1,'double');
fclose(fout)

ans =

     0

fout = fopen([ICsubdir '/cpos2'], 'w');
fwrite(fout,Psi2,'double');
fclose(fout)

ans =

     0

fout = fopen([ICsubdir '/cpos3'], 'w');
fwrite(fout,Psi3,'double');
fclose(fout)

ans =

     0

fname

fname =

    '../ICs/1.00Mpch_64_ic40_jc84_kc79/ParticlePositions'

dat=h5read(fname,datname);
dat(1,1)

ans =

    0.0099

datt(230000,1)

ans =

    0.7423

dat(230000,1)

ans =

    0.7423

dat(230000,3)

ans =

    0.8755

datt(230000,3)

ans =

    0.8755

datt(1000,3)

ans =

    0.0043

dat(1000,3)

ans =

    0.0043

dat(1:100,1)./datt(1:100,1)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

dat(1000:1100,1)./datt(1000:1100,1)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

dat(10000:10100,2)./datt(10000:10100,2)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
ND1 = Ncell_p;
ND3 = Ncell_p^3;
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
%h5write(foutname,datasetname,reshape(Psi1,[ND3,1]), [1 1], [ND3 1]);
%h5write(foutname,datasetname,reshape(Psi2,[ND3,1]), [1 2], [ND3 1]);
%h5write(foutname,datasetname,reshape(Psi3,[ND3,1]), [1 3], [ND3 1]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
datt=h5read(ffname,datname);
dat(10000:10100,2)./datt(10000:10100,2)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

fname

fname =

    '../ICs/1.00Mpch_64_ic40_jc84_kc79/ParticlePositions'

ffname

ffname =

    'ParticlePositions'

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
ND1 = Ncell_p;
ND3 = Ncell_p^3;
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
%h5write(foutname,datasetname,[Psi1(:) Psi2(:) Psi3(:)]);
h5write(foutname,datasetname,reshape(Psi1,[ND3,1]), [1 1], [ND3 1]);
h5write(foutname,datasetname,reshape(Psi2,[ND3,1]), [1 2], [ND3 1]);
h5write(foutname,datasetname,reshape(Psi3,[ND3,1]), [1 3], [ND3 1]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
ffname

ffname =

    'ParticlePositions'

datt=h5read(ffname,datname);
dat=h5read(fname,datname);
dat(1,1)

ans =

    0.0099

datt(1,1)

ans =

    0.0099

dat(700:710,1)./datt(700:710,1)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

dat(70000:70010,1)./datt(70000:70010,1)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

dat(70000:70010,3)./datt(70000:70010,3)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddims = -99999*ones(1,3);
%%h5create(foutname,datasetname,size(ppos));
%%h5write(foutname,datasetname,ppos);
ND1 = Ncell_p;
ND3 = Ncell_p^3;
h5create(foutname,datasetname,size([Psi1(:) Psi2(:) Psi3(:)]));
% $$$ h5write(foutname,datasetname,reshape(Psi1,[ND3,1]), [1 1], [ND3 1]);
% $$$ h5write(foutname,datasetname,reshape(Psi2,[ND3,1]), [1 2], [ND3 1]);
% $$$ h5write(foutname,datasetname,reshape(Psi3,[ND3,1]), [1 3], [ND3 1]);
h5write(foutname,datasetname,Psi1(:), [1 1], [ND3 1]);
h5write(foutname,datasetname,Psi2(:), [1 2], [ND3 1]);
h5write(foutname,datasetname,Psi3(:), [1 3], [ND3 1]);
h5writeatt(foutname,datasetname,'Component_Rank',int64(3));
h5writeatt(foutname,datasetname,'Component_Size',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'Rank',int64(1));
h5writeatt(foutname,datasetname,'Dimensions',int64(length(Psi1(:))));
h5writeatt(foutname,datasetname,'TopGridDims',int64(topgriddims));
h5writeatt(foutname,datasetname,'TopGridEnd',int64(topgriddims-1));
h5writeatt(foutname,datasetname,'TopGridStart',int64(zeros(1,3)));
datt=h5read(ffname, datname);
dat(70000:70010,1)./datt(70000:70010,1)

ans =

     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1

% $$$ h5write(foutname,datasetname,reshape(Psi3,[ND3,1]), [1 3], [ND3 1]);
size([Psi1(:) Psi2(:)])

ans =

      262144           2

a=size([Psi1(:) Psi2(:)])

a =

      262144           2

a

a =

      262144           2

a=[55 5]

a =

    55     5

foutname='ParticlePositions';
datasetname=['/' foutname];
delete(foutname); %% In case file already exists, delete the file
%%ppos = [Psi1 ; Psi2 ; Psi3]; %% This asssignment too memory costly
topgriddim